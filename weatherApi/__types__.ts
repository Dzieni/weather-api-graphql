/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/current.json": {
		/**
		 * Realtime API
		 * @description Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml. The data is returned as a Current Object.<br /><br />Current object contains current or realtime weather information for a given city.
		 */
		get: operations["realtime-weather"];
	};
	"/forecast.json": {
		/**
		 * Forecast API
		 * @description Forecast weather API method returns, depending upon your price plan level, upto next 14 day weather forecast and weather alert as json or xml. The data is returned as a Forecast Object.<br /><br />Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city.
		 */
		get: operations["forecast-weather"];
	};
	"/future.json": {
		/**
		 * Future API
		 * @description Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 365 days from today in the future.
		 */
		get: operations["future-weather"];
	};
	"/history.json": {
		/**
		 * History API
		 * @description History weather API method returns historical weather for a date on or after 1st Jan, 2010 as json. The data is returned as a Forecast Object.
		 */
		get: operations["history-weather"];
	};
	"/marine.json": {
		/**
		 * Marine Weather API
		 * @description Marine weather API method returns upto next 7 day (depending upon your price plan level) marine and sailing weather forecast and tide data (depending upon your price plan level) as json or xml. The data is returned as a Marine Object.<br /><br />Marine object, depending upon your price plan level, contains astronomy data, day weather forecast and hourly interval weather information and tide data for a given sea/ocean point.
		 */
		get: operations["marine-weather"];
	};
	"/search.json": {
		/**
		 * Search/Autocomplete API
		 * @description WeatherAPI.com Search or Autocomplete API returns matching cities and towns as an array of Location object.
		 */
		get: operations["search-autocomplete-weather"];
	};
	"/ip.json": {
		/**
		 * IP Lookup API
		 * @description IP Lookup API method allows a user to get up to date information for an IP address.
		 */
		get: operations["ip-lookup"];
	};
	"/timezone.json": {
		/**
		 * Time Zone API
		 * @description Return Location Object
		 */
		get: operations["time-zone"];
	};
	"/astronomy.json": {
		/**
		 * Astronomy API
		 * @description Return Location and Astronomy Object
		 */
		get: operations["astronomy"];
	};
}

export type webhooks = Record<string, never>;

export interface components {
	schemas: {
		search: {
			/**
			 * Format: int32
			 * @example 2796590
			 */
			id?: number;
			/** @example Holborn */
			name?: string;
			/** @example Camden Greater London */
			region?: string;
			/** @example United Kingdom */
			country?: string;
			/** @example 51.52 */
			lat?: number;
			/** @example -0.12 */
			lon?: number;
			/** @example holborn-camden-greater-london-united-kingdom */
			url?: string;
		};
		ArrayOfSearch: components["schemas"]["search"][];
		location: {
			/** @example New York */
			name?: string;
			/** @example New York */
			region?: string;
			/** @example United States of America */
			country?: string;
			/** @example 40.71 */
			lat?: number;
			/** @example -74.01 */
			lon?: number;
			/** @example America/New_York */
			tz_id?: string;
			/**
			 * Format: int32
			 * @example 1658522976
			 */
			localtime_epoch?: number;
			/** @example 2022-07-22 16:49 */
			localtime?: string;
		};
		current: {
			/**
			 * Format: int32
			 * @example 1658522700
			 */
			last_updated_epoch?: number;
			/** @example 2022-07-22 16:45 */
			last_updated?: string;
			/** @example 34.4 */
			temp_c?: number;
			/** @example 93.9 */
			temp_f?: number;
			/**
			 * Format: int32
			 * @example 1
			 */
			is_day?: number;
			condition?: {
				/** @example Partly cloudy */
				text?: string;
				/** @example //cdn.weatherapi.com/weather/64x64/day/116.png */
				icon?: string;
				/**
				 * Format: int32
				 * @example 1003
				 */
				code?: number;
			};
			/** @example 16.1 */
			wind_mph?: number;
			/** @example 25.9 */
			wind_kph?: number;
			/** @example 180 */
			wind_degree?: number;
			/** @example S */
			wind_dir?: string;
			/** @example 1011 */
			pressure_mb?: number;
			/** @example 29.85 */
			pressure_in?: number;
			/** @example 0 */
			precip_mm?: number;
			/** @example 0 */
			precip_in?: number;
			/** @example 31 */
			humidity?: number;
			/** @example 75 */
			cloud?: number;
			/** @example 37 */
			feelslike_c?: number;
			/** @example 98.6 */
			feelslike_f?: number;
			/** @example 16 */
			vis_km?: number;
			/** @example 9 */
			vis_miles?: number;
			/**
			 * Format: int32
			 * @example 8
			 */
			uv?: number;
			/** @example 11.6 */
			gust_mph?: number;
			/** @example 18.7 */
			gust_kph?: number;
			air_quality?: {
				/** @example 293.70001220703125 */
				co?: number;
				/** @example 18.5 */
				no2?: number;
				/** @example 234.60000610351562 */
				o3?: number;
				/** @example 12 */
				so2?: number;
				/** @example 13.600000381469727 */
				pm2_5?: number;
				/** @example 15 */
				pm10?: number;
				/**
				 * Format: int32
				 * @example 1
				 */
				"us-epa-index"?: number;
				/**
				 * Format: int32
				 * @example 2
				 */
				"gb-defra-index"?: number;
			};
		};
		forecast: {
			forecastday?: {
				/**
				 * Format: date
				 * @example 2022-07-22
				 */
				date?: string;
				/**
				 * Format: int32
				 * @example 1658448000
				 */
				date_epoch?: number;
				day?: {
					/** @example 35.9 */
					maxtemp_c?: number;
					/** @example 96.6 */
					maxtemp_f?: number;
					/** @example 26.3 */
					mintemp_c?: number;
					/** @example 79.3 */
					mintemp_f?: number;
					/** @example 30.7 */
					avgtemp_c?: number;
					/** @example 87.3 */
					avgtemp_f?: number;
					/** @example 12.8 */
					maxwind_mph?: number;
					/** @example 20.5 */
					maxwind_kph?: number;
					/** @example 0 */
					totalprecip_mm?: number;
					/** @example 0 */
					totalprecip_in?: number;
					/** @example 10 */
					avgvis_km?: number;
					/** @example 6 */
					avgvis_miles?: number;
					/** @example 53 */
					avghumidity?: number;
					/**
					 * Format: int32
					 * @example 0
					 */
					daily_will_it_rain?: number;
					/** @example 0 */
					daily_chance_of_rain?: number;
					/**
					 * Format: int32
					 * @example 0
					 */
					daily_will_it_snow?: number;
					/** @example 0 */
					daily_chance_of_snow?: number;
					condition?: {
						/** @example Sunny */
						text?: string;
						/** @example //cdn.weatherapi.com/weather/64x64/day/113.png */
						icon?: string;
						/**
						 * Format: int32
						 * @example 1000
						 */
						code?: number;
					};
					/**
					 * Format: int32
					 * @example 8
					 */
					uv?: number;
				};
				astro?: {
					/** @example 05:44 AM */
					sunrise?: string;
					/** @example 08:20 PM */
					sunset?: string;
					/** @example 12:58 AM */
					moonrise?: string;
					/** @example 03:35 PM */
					moonset?: string;
					/** @example Last Quarter */
					moon_phase?: string;
					/** @example 36 */
					moon_illumination?: string;
				};
				hour?: {
					/**
					 * Format: int32
					 * @example 1658462400
					 */
					time_epoch?: number;
					/** @example 2022-07-22 00:00 */
					time?: string;
					/** @example 28.7 */
					temp_c?: number;
					/** @example 83.7 */
					temp_f?: number;
					/**
					 * Format: int32
					 * @example 0
					 */
					is_day?: number;
					condition?: {
						/** @example Clear */
						text?: string;
						/** @example //cdn.weatherapi.com/weather/64x64/night/113.png */
						icon?: string;
						/**
						 * Format: int32
						 * @example 1000
						 */
						code?: number;
					};
					/** @example 9.4 */
					wind_mph?: number;
					/** @example 15.1 */
					wind_kph?: number;
					/** @example 265 */
					wind_degree?: number;
					/** @example W */
					wind_dir?: string;
					/** @example 1007 */
					pressure_mb?: number;
					/** @example 29.73 */
					pressure_in?: number;
					/** @example 0 */
					precip_mm?: number;
					/** @example 0 */
					precip_in?: number;
					/** @example 58 */
					humidity?: number;
					/** @example 19 */
					cloud?: number;
					/** @example 30.5 */
					feelslike_c?: number;
					/** @example 86.9 */
					feelslike_f?: number;
					/** @example 28.7 */
					windchill_c?: number;
					/** @example 83.7 */
					windchill_f?: number;
					/** @example 30.5 */
					heatindex_c?: number;
					/** @example 86.9 */
					heatindex_f?: number;
					/** @example 19.6 */
					dewpoint_c?: number;
					/** @example 67.3 */
					dewpoint_f?: number;
					/**
					 * Format: int32
					 * @example 0
					 */
					will_it_rain?: number;
					/** @example 0 */
					chance_of_rain?: number;
					/**
					 * Format: int32
					 * @example 0
					 */
					will_it_snow?: number;
					/** @example 0 */
					chance_of_snow?: number;
					/** @example 10 */
					vis_km?: number;
					/** @example 6 */
					vis_miles?: number;
					/** @example 15 */
					gust_mph?: number;
					/** @example 24.1 */
					gust_kph?: number;
					/**
					 * Format: int32
					 * @example 1
					 */
					uv?: number;
				}[];
			}[];
		};
		marine: {
			forecastday?: {
				/**
				 * Format: date
				 * @example 2022-07-22
				 */
				date?: string;
				/**
				 * Format: int32
				 * @example 1658448000
				 */
				date_epoch?: number;
				day?: {
					/** @example 35.9 */
					maxtemp_c?: number;
					/** @example 96.6 */
					maxtemp_f?: number;
					/** @example 26.3 */
					mintemp_c?: number;
					/** @example 79.3 */
					mintemp_f?: number;
					/** @example 30.7 */
					avgtemp_c?: number;
					/** @example 87.3 */
					avgtemp_f?: number;
					/** @example 12.8 */
					maxwind_mph?: number;
					/** @example 20.5 */
					maxwind_kph?: number;
					/** @example 0 */
					totalprecip_mm?: number;
					/** @example 0 */
					totalprecip_in?: number;
					/** @example 10 */
					avgvis_km?: number;
					/** @example 6 */
					avgvis_miles?: number;
					/** @example 53 */
					avghumidity?: number;
					/**
					 * Format: int32
					 * @example 0
					 */
					daily_will_it_rain?: number;
					/** @example 0 */
					daily_chance_of_rain?: number;
					/**
					 * Format: int32
					 * @example 0
					 */
					daily_will_it_snow?: number;
					/** @example 0 */
					daily_chance_of_snow?: number;
					condition?: {
						/** @example Sunny */
						text?: string;
						/** @example //cdn.weatherapi.com/weather/64x64/day/113.png */
						icon?: string;
						/**
						 * Format: int32
						 * @example 1000
						 */
						code?: number;
					};
					/**
					 * Format: int32
					 * @example 8
					 */
					uv?: number;
				};
				astro?: {
					/** @example 05:44 AM */
					sunrise?: string;
					/** @example 08:20 PM */
					sunset?: string;
					/** @example 12:58 AM */
					moonrise?: string;
					/** @example 03:35 PM */
					moonset?: string;
					/** @example Last Quarter */
					moon_phase?: string;
					/** @example 36 */
					moon_illumination?: string;
				};
				hour?: {
					/**
					 * Format: int32
					 * @example 1658462400
					 */
					time_epoch?: number;
					/** @example 2022-07-22 00:00 */
					time?: string;
					/** @example 28.7 */
					temp_c?: number;
					/** @example 83.7 */
					temp_f?: number;
					/**
					 * Format: int32
					 * @example 0
					 */
					is_day?: number;
					condition?: {
						/** @example Clear */
						text?: string;
						/** @example //cdn.weatherapi.com/weather/64x64/night/113.png */
						icon?: string;
						/**
						 * Format: int32
						 * @example 1000
						 */
						code?: number;
					};
					/** @example 9.4 */
					wind_mph?: number;
					/** @example 15.1 */
					wind_kph?: number;
					/** @example 265 */
					wind_degree?: number;
					/** @example W */
					wind_dir?: string;
					/** @example 1007 */
					pressure_mb?: number;
					/** @example 29.73 */
					pressure_in?: number;
					/** @example 0 */
					precip_mm?: number;
					/** @example 0 */
					precip_in?: number;
					/** @example 58 */
					humidity?: number;
					/** @example 19 */
					cloud?: number;
					/** @example 30.5 */
					feelslike_c?: number;
					/** @example 86.9 */
					feelslike_f?: number;
					/** @example 28.7 */
					windchill_c?: number;
					/** @example 83.7 */
					windchill_f?: number;
					/** @example 30.5 */
					heatindex_c?: number;
					/** @example 86.9 */
					heatindex_f?: number;
					/** @example 19.6 */
					dewpoint_c?: number;
					/** @example 67.3 */
					dewpoint_f?: number;
					/**
					 * Format: int32
					 * @example 0
					 */
					will_it_rain?: number;
					/** @example 0 */
					chance_of_rain?: number;
					/**
					 * Format: int32
					 * @example 0
					 */
					will_it_snow?: number;
					/** @example 0 */
					chance_of_snow?: number;
					/** @example 10 */
					vis_km?: number;
					/** @example 6 */
					vis_miles?: number;
					/** @example 15 */
					gust_mph?: number;
					/** @example 24.1 */
					gust_kph?: number;
					/** @example 24.1 */
					sig_ht_mt?: number;
					/** @example 24.1 */
					swell_ht_mt?: number;
					/** @example 24.1 */
					swell_ht_ft?: number;
					/** @example 24.1 */
					swell_dir?: number;
					/** @example 24.1 */
					swell_dir_16_point?: number;
					/** @example 24.1 */
					swell_period_secs?: number;
					/**
					 * Format: int32
					 * @example 1
					 */
					uv?: number;
				}[];
			}[];
		};
		alerts: {
			alert?: {
				/** @example NWS New York City - Upton (Long Island and New York City) */
				headline?: string;
				/** @example null */
				msgtype?: string;
				/** @example null */
				severity?: string;
				/** @example null */
				urgency?: string;
				/** @example null */
				areas?: string;
				/** @example Extreme temperature value */
				category?: string;
				/** @example null */
				certainty?: string;
				/** @example Heat Advisory */
				event?: string;
				/** @example null */
				note?: string;
				/**
				 * Format: date-time
				 * @example 2022-07-21T19:38:00Z
				 */
				effective?: string;
				/**
				 * Format: date-time
				 * @example 2022-07-25T00:00:00Z
				 */
				expires?: string;
				/** @example ...HEAT ADVISORY REMAINS IN EFFECT UNTIL 8 PM EDT SUNDAY... * WHAT...Heat index values up to 105. * WHERE...Eastern Passaic Hudson Western Bergen Western Essex Eastern Bergen and Eastern Essex Counties. * WHEN...Until 8 PM EDT Sunday. * IMPACTS...High temperatures and high humidity may cause heat illnesses to occur. */
				desc?: string;
				/** @example */
				instruction?: string;
			}[];
		};
		ip: {
			/** @example 185.249.71.82 */
			ip?: string;
			/** @example ipv4 */
			type?: string;
			/** @example EU */
			continent_code?: string;
			/** @example Europe */
			continent_name?: string;
			/** @example GB */
			country_code?: string;
			/** @example United Kingdom */
			country_name?: string;
			/** @example false */
			is_eu?: string;
			/**
			 * Format: int32
			 * @example 2643743
			 */
			geoname_id?: number;
			/** @example London */
			city?: string;
			/** @example null */
			region?: string;
			/** @example 51.5264 */
			lat?: number;
			/** @example -0.0841 */
			lon?: number;
			/** @example Europe/London */
			tz_id?: string;
			/**
			 * Format: int32
			 * @example 1658520645
			 */
			localtime_epoch?: number;
			/** @example 2022-07-22 21:10 */
			localtime?: string;
		};
		astronomy: {
			astro?: {
				/** @example 05:10 AM */
				sunrise?: string;
				/** @example 09:03 PM */
				sunset?: string;
				/** @example 12:29 AM */
				moonrise?: string;
				/** @example 04:01 PM */
				moonset?: string;
				/** @example Third Quarter */
				moon_phase?: string;
				/** @example 42 */
				moon_illumination?: string;
			};
		};
		error400: {
			/**
			 * Format: int32
			 * @example 1003
			 */
			code?: number;
			/** @example Parameter 'q' not provided. */
			message?: string;
		};
		error401: {
			/**
			 * Format: int32
			 * @example 1002
			 */
			code?: number;
			/** @example API key not provided */
			message?: string;
		};
		error403: {
			/**
			 * Format: int32
			 * @example 2007
			 */
			code?: number;
			/** @example API key has exceeded calls per month quota. */
			message?: string;
		};
	};
	responses: {
		/** @description Error code 1003: Parameter 'q' not provided.<br />Error code 1005: API request url is invalid.<br />Error code 1006: No location found matching parameter 'q'<br />Error code 9000: Json body passed in bulk request is invalid. Please make sure it is valid json with utf-8 encoding.<br />Error code 9001: Json body contains too many locations for bulk request. Please keep it below 50 in a single request.<br />Error code 9999: Internal application error. */
		400: {
			content: {
				"application/json": components["schemas"]["error400"];
				"application/xml": components["schemas"]["error400"];
			};
		};
		/** @description Error code 1002: API key not provided.<br />Error code 2006: API key provided is invalid */
		401: {
			content: {
				"application/json": components["schemas"]["error401"];
				"application/xml": components["schemas"]["error401"];
			};
		};
		/** @description Error code 2007: API key has exceeded calls per month quota.<br />Error code 2008: API key has been disabled.<br />Error code 2009: API key does not have access to the resource. Please check pricing page for what is allowed in your API subscription plan. */
		403: {
			content: {
				"application/json": components["schemas"]["error403"];
				"application/xml": components["schemas"]["error403"];
			};
		};
	};
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
	/**
	 * Realtime API
	 * @description Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml. The data is returned as a Current Object.<br /><br />Current object contains current or realtime weather information for a given city.
	 */
	"realtime-weather": {
		parameters: {
			query: {
				/** @description Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more. */
				q: string;
				/** @description Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'. */
				lang?: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": {
						location?: components["schemas"]["location"];
						current?: components["schemas"]["current"];
					};
					"application/xml": {
						location?: components["schemas"]["location"];
						current?: components["schemas"]["current"];
					};
				};
			};
			400: components["responses"]["400"];
			401: components["responses"]["401"];
			403: components["responses"]["403"];
		};
	};
	/**
	 * Forecast API
	 * @description Forecast weather API method returns, depending upon your price plan level, upto next 14 day weather forecast and weather alert as json or xml. The data is returned as a Forecast Object.<br /><br />Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city.
	 */
	"forecast-weather": {
		parameters: {
			query: {
				/** @description Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more. */
				q: string;
				/** @description Number of days of weather forecast. Value ranges from 1 to 14 */
				days: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14;
				/** @description Date should be between today and next 14 day in yyyy-MM-dd format. e.g. '2015-01-01' */
				dt?: string;
				/** @description Please either pass 'dt' or 'unixdt' and not both in same request. unixdt should be between today and next 14 day in Unix format. e.g. 1490227200 */
				unixdt?: number;
				/** @description Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6 */
				hour?: number;
				/** @description Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'. */
				lang?: string;
				/** @description Enable/Disable alerts in forecast API output. Example, alerts=yes or alerts=no. */
				alerts?: string;
				/** @description Enable/Disable Air Quality data in forecast API output. Example, aqi=yes or aqi=no. */
				aqi?: string;
				/** @description Get 15 min interval or 24 hour average data for Forecast and History API. Available for Enterprise clients only. E.g:- tp=15 */
				tp?: number;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": {
						location?: components["schemas"]["location"];
						current?: components["schemas"]["current"];
						forecast?: components["schemas"]["forecast"];
						alerts?: components["schemas"]["alerts"];
					};
					"application/xml": {
						location?: components["schemas"]["location"];
						current?: components["schemas"]["current"];
						forecast?: components["schemas"]["forecast"];
						alerts?: components["schemas"]["alerts"];
					};
				};
			};
			400: components["responses"]["400"];
			401: components["responses"]["401"];
			403: components["responses"]["403"];
		};
	};
	/**
	 * Future API
	 * @description Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 365 days from today in the future.
	 */
	"future-weather": {
		parameters: {
			query: {
				/** @description Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more. */
				q: string;
				/** @description Date should be between 14 days and 300 days from today in the future in yyyy-MM-dd format (i.e. dt=2023-01-01) */
				dt?: string;
				/** @description Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'. */
				lang?: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": {
						location?: components["schemas"]["location"];
						forecast?: components["schemas"]["forecast"];
					};
					"application/xml": {
						location?: components["schemas"]["location"];
						forecast?: components["schemas"]["forecast"];
					};
				};
			};
			400: components["responses"]["400"];
			401: components["responses"]["401"];
			403: components["responses"]["403"];
		};
	};
	/**
	 * History API
	 * @description History weather API method returns historical weather for a date on or after 1st Jan, 2010 as json. The data is returned as a Forecast Object.
	 */
	"history-weather": {
		parameters: {
			query: {
				/** @description Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more. */
				q: string;
				/** @description Date on or after 1st Jan, 2015 in yyyy-MM-dd format */
				dt: string;
				/** @description Please either pass 'dt' or 'unixdt' and not both in same request.<br />unixdt should be on or after 1st Jan, 2015 in Unix format */
				unixdt?: number;
				/** @description Date on or after 1st Jan, 2015 in yyyy-MM-dd format<br />'end_dt' should be greater than 'dt' parameter and difference should not be more than 30 days between the two dates. */
				end_dt?: string;
				/** @description Date on or after 1st Jan, 2015 in Unix Timestamp format<br />unixend_dt has same restriction as 'end_dt' parameter. Please either pass 'end_dt' or 'unixend_dt' and not both in same request. e.g. unixend_dt=1490227200 */
				unixend_dt?: number;
				/** @description Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6 */
				hour?: number;
				/** @description Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'. */
				lang?: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": {
						location?: components["schemas"]["location"];
						forecast?: components["schemas"]["forecast"];
					};
					"application/xml": {
						location?: components["schemas"]["location"];
						forecast?: components["schemas"]["forecast"];
					};
				};
			};
			400: components["responses"]["400"];
			401: components["responses"]["401"];
			403: components["responses"]["403"];
		};
	};
	/**
	 * Marine Weather API
	 * @description Marine weather API method returns upto next 7 day (depending upon your price plan level) marine and sailing weather forecast and tide data (depending upon your price plan level) as json or xml. The data is returned as a Marine Object.<br /><br />Marine object, depending upon your price plan level, contains astronomy data, day weather forecast and hourly interval weather information and tide data for a given sea/ocean point.
	 */
	"marine-weather": {
		parameters: {
			query: {
				/** @description Pass Latitude/Longitude (decimal degree) which is on a sea/ocean. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more. */
				q: string;
				/** @description Number of days of weather forecast. Value ranges from 1 to 7 */
				days: 1 | 2 | 3 | 4 | 5 | 6 | 7;
				/** @description Date should be between today and next 7 day in yyyy-MM-dd format. e.g. '2023-05-20' */
				dt?: string;
				/** @description Please either pass 'dt' or 'unixdt' and not both in same request. unixdt should be between today and next 7 day in Unix format. e.g. 1490227200 */
				unixdt?: number;
				/** @description Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6 */
				hour?: number;
				/** @description Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'. */
				lang?: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": {
						location?: components["schemas"]["location"];
						forecast?: components["schemas"]["marine"];
					};
					"application/xml": {
						location?: components["schemas"]["location"];
						forecast?: components["schemas"]["marine"];
					};
				};
			};
			400: components["responses"]["400"];
			401: components["responses"]["401"];
			403: components["responses"]["403"];
		};
	};
	/**
	 * Search/Autocomplete API
	 * @description WeatherAPI.com Search or Autocomplete API returns matching cities and towns as an array of Location object.
	 */
	"search-autocomplete-weather": {
		parameters: {
			query: {
				/** @description Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more. */
				q: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": components["schemas"]["ArrayOfSearch"];
					"application/xml": components["schemas"]["ArrayOfSearch"];
				};
			};
			400: components["responses"]["400"];
			401: components["responses"]["401"];
			403: components["responses"]["403"];
		};
	};
	/**
	 * IP Lookup API
	 * @description IP Lookup API method allows a user to get up to date information for an IP address.
	 */
	"ip-lookup": {
		parameters: {
			query: {
				/** @description Pass IP address. */
				q: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": components["schemas"]["ip"];
					"application/xml": components["schemas"]["ip"];
				};
			};
			400: components["responses"]["400"];
			401: components["responses"]["401"];
			403: components["responses"]["403"];
		};
	};
	/**
	 * Time Zone API
	 * @description Return Location Object
	 */
	"time-zone": {
		parameters: {
			query: {
				/** @description Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more. */
				q: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": components["schemas"]["location"];
					"application/xml": components["schemas"]["location"];
				};
			};
			400: components["responses"]["400"];
			401: components["responses"]["401"];
			403: components["responses"]["403"];
		};
	};
	/**
	 * Astronomy API
	 * @description Return Location and Astronomy Object
	 */
	astronomy: {
		parameters: {
			query: {
				/** @description Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more. */
				q: string;
				/** @description Date on or after 1st Jan, 2015 in yyyy-MM-dd format */
				dt: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": {
						location?: components["schemas"]["location"];
						astronomy?: components["schemas"]["astronomy"];
					};
					"application/xml": {
						location?: components["schemas"]["location"];
						astronomy?: components["schemas"]["astronomy"];
					};
				};
			};
			400: components["responses"]["400"];
			401: components["responses"]["401"];
			403: components["responses"]["403"];
		};
	};
}
